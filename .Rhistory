WindFarm_2min_AnalyticsEngineer_wWS <- read.csv("~/Documents/Data Science/Projects/GE/GE_DataSCience/WindFarm_2min_AnalyticsEngineer_wWS.csv")
View(WindFarm_2min_AnalyticsEngineer_wWS)
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
View(WindFarm_2min_AnalyticsEngineer_wWS)
# Importing the dataset
dataset = read.csv('WindFarm_2min_AnalyticsEngineer_wWS.csv')
dataset = dataset[1:21]
# Encoding the target feature as factor
dataset$ShearTypeCLass = factor(dataset$Purchased, levels = c(0, 1))
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
# Importing the dataset
dataset = read.csv('WindFarm_2min_AnalyticsEngineer_wWS.csv')
dataset = dataset[1:21]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.75)
split = sample.split(dataset$ShearTypeClass, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-20] = scale(training_set[-20])
View(training_set)
source('~/Documents/Data Science/Projects/GE/GE_DataSCience/GE_DataScience.R', echo=TRUE)
dataset = dataset[1:21]
View(dataset)
View(dataset)
dataset = dataset[1:21]
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
# Importing the dataset
df = read.csv('WindFarm_2min_AnalyticsEngineer_wWS.csv')
dataset = df[1:21]
View(df)
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
# Importing the dataset
dataset = read.csv('WindFarm_2min_AnalyticsEngineer_wWS.csv')
dataset = df[2:21]
dataset = dataset[2:21]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$ShearTypeClass, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-20] = scale(training_set[-20])
test_set[-20] = scale(test_set[-20])
# Applying PCA
# install.packages('caret')
library(caret)
# install.packages('e1071')
library(e1071)
pca = preProcess(x = training_set[-3], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
# Fitting Random Forest Classification to the Training set
install.packages('randomForest')
library(randomForest)
# Fitting Random Forest Classification to the Training set
install.packages('randomForest')
# Fitting Random Forest Classification to the Training set
install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[-3],
y = training_set$Purchased,
ntree = 50)
classifier = randomForest(x = training_set[-3],
y = training_set$ShearTypeClass,
ntree = 50)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
classifier = randomForest(x = training_set[-3],
y = training_set$ShearTypeClass,
ntree = 50)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
classifier = randomForest(x = training_set[-3],
y = training_set$ShearTypeClass,
ntree = 50,
keep.forest=TRUE)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
classifier = randomForest(x = training_set[-3],
y = as.factor(training_set$ShearTypeClass),
ntree = 50,
keep.forest=TRUE)
classifier = randomForest(x = training_set[-3],
y = training_set$ShearTypeClass,
ntree = 50,
keep.forest=TRUE)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
View(test_set)
source('~/Documents/Data Science/Projects/GE/GE_DataSCience/GE_DataScience.R', echo=TRUE)
install.packages("randomForest")
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
View(test_set)
View(training_set)
# Visualising the Training set results
install.packages('ElemStatLearn')
library(ElemStatLearn)
source('~/Documents/Data Science/Projects/GE/GE_DataSCience/GE_DataScience.R', echo=TRUE)
install.packages("ElemStatLearn")
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
# Importing the dataset
dataset = read.csv('WindFarm_2min_AnalyticsEngineer_wWS.csv')
dataset = dataset[2:21]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$ShearTypeClass, SplitRatio = 0.75)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-20] = scale(training_set[-20])
test_set[-20] = scale(test_set[-20])
# Applying PCA
# install.packages('caret')
library(caret)
# install.packages('e1071')
library(e1071)
pca = preProcess(x = training_set[-20], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
# Fitting Random Forest Classification to the Training set
#install.packages('randomForest')
library(e1071)
classifier = svm(formula = ShearTypeClass ~ .,
data = training_set,
type = 'C-classification',
kernel = 'linear')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
# Visualising the Training set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
cm
classifier = svm(formula = ShearTypeClass ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
# Importing the dataset
dataset = read.csv('WindFarm_2min_AnalyticsEngineer_wWS.csv')
dataset = dataset[2:21]
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$ShearTypeClass, SplitRatio = 0.80)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[-20] = scale(training_set[-20])
test_set[-20] = scale(test_set[-20])
# Applying PCA
# install.packages('caret')
library(caret)
# install.packages('e1071')
library(e1071)
pca = preProcess(x = training_set[-20], method = 'pca', pcaComp = 2)
training_set = predict(pca, training_set)
training_set = training_set[c(2, 3, 1)]
test_set = predict(pca, test_set)
test_set = test_set[c(2, 3, 1)]
# Fitting Random Forest Classification to the Training set
#install.packages('randomForest')
library(e1071)
classifier = svm(formula = ShearTypeClass ~ .,
data = training_set,
type = 'C-classification',
kernel = 'radial')
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[-3])
# Making the Confusion Matrix
cm = table(test_set[, 3], y_pred)
cm
# Visualising the Training set results
#install.packages('ElemStatLearn')
library(ElemStatLearn)
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', 'tomato')))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', 'red3')))
set = training_set
X1 = seq(min(set[, 1]) - 1, max(set[, 1]) + 1, by = 0.01)
X2 = seq(min(set[, 2]) - 1, max(set[, 2]) + 1, by = 0.01)
grid_set = expand.grid(X1, X2)
colnames(grid_set) = c('PC1', 'PC2')
y_grid = predict(classifier, newdata = grid_set)
plot(set[, -3],
main = 'SVM (Training set)',
xlab = 'PC1', ylab = 'PC2',
xlim = range(X1), ylim = range(X2))
contour(X1, X2, matrix(as.numeric(y_grid), length(X1), length(X2)), add = TRUE)
points(grid_set, pch = '.', col = ifelse(y_grid == 2, 'deepskyblue', ifelse(y_grid == 1, 'springgreen3', ifelse(y_grid == 0, 'white', 'tomato'))))
points(set, pch = 21, bg = ifelse(set[, 3] == 2, 'blue3', ifelse(set[, 3] == 1, 'green4', ifelse(set[, 3] == 1, 'black', 'red3'))))
