library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
RightMiddle = cbind(test_set[,c(1,41)],y_pred)
write.csv(RightMiddle, file = "RightMiddle.csv",row.names=FALSE)
# Pneumoconiosis
# Random Forest Classification
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
# Importing the dataset
library("readxl")
dataset = read_excel("CollatedPneumoconiosisData-GE Internal.xlsx", sheet = "LeftMiddle")
# Encoding the target feature as factor
dataset$Label = factor(dataset$Label)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Label, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,c(2:40)] = scale(training_set[,c(2:40)])
test_set[,c(2:40)] = scale(test_set[,c(2:40)])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
LeftMiddle = cbind(test_set[,c(1,41)],y_pred)
write.csv(LeftMiddle, file = "RightMiddle.csv",row.names=FALSE)
# Pneumoconiosis
# Random Forest Classification
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
# Importing the dataset
library("readxl")
dataset = read_excel("CollatedPneumoconiosisData-GE Internal.xlsx", sheet = "LeftLower")
# Encoding the target feature as factor
dataset$Label = factor(dataset$Label)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Label, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,c(2:40)] = scale(training_set[,c(2:40)])
test_set[,c(2:40)] = scale(test_set[,c(2:40)])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
LeftLower = cbind(test_set[,c(1,41)],y_pred)
write.csv(LeftLower, file = "RightLower.csv",row.names=FALSE)
# Pneumoconiosis
# Random Forest Classification
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
# Importing the dataset
library("readxl")
dataset = read_excel("CollatedPneumoconiosisData-GE Internal.xlsx", sheet = "LeftUpper")
# Encoding the target feature as factor
dataset$Label = factor(dataset$Label)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Label, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,c(2:40)] = scale(training_set[,c(2:40)])
test_set[,c(2:40)] = scale(test_set[,c(2:40)])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
LeftUpper = cbind(test_set[,c(1,41)],y_pred)
write.csv(LeftUpper, file = "RightUpper.csv",row.names=FALSE)
# Pneumoconiosis
# Random Forest Classification
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
# Importing the dataset
library("readxl")
dataset = read_excel("CollatedPneumoconiosisData-GE Internal.xlsx", sheet = "LeftUpper")
# Encoding the target feature as factor
dataset$Label = factor(dataset$Label)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Label, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,c(2:40)] = scale(training_set[,c(2:40)])
test_set[,c(2:40)] = scale(test_set[,c(2:40)])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
LeftUpper = cbind(test_set[,c(1,41)],y_pred)
write.csv(LeftUpper, file = "RightUpper.csv",row.names=FALSE)
# Pneumoconiosis
# Random Forest Classification
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
inputFile = "CollatedPneumoconiosisData-GE Internal.xlsx"
inputSheet = "RightUpper"
# Importing the dataset
library("readxl")
dataset = read_excel(inputFile, sheet = inputSheet)
# Encoding the target feature as factor
dataset$Label = factor(dataset$Label)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Label, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,c(2:40)] = scale(training_set[,c(2:40)])
test_set[,c(2:40)] = scale(test_set[,c(2:40)])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
outputFile = cbind(test_set[,c(1,41)],y_pred)
write.csv(outputFile, file = "RightUpper.csv",row.names=FALSE)
# Pneumoconiosis
# Random Forest Classification
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
inputFile = "CollatedPneumoconiosisData-GE Internal.xlsx"
inputSheet = "RightMiddle"
# Importing the dataset
library("readxl")
dataset = read_excel(inputFile, sheet = inputSheet)
# Encoding the target feature as factor
dataset$Label = factor(dataset$Label)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Label, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,c(2:40)] = scale(training_set[,c(2:40)])
test_set[,c(2:40)] = scale(test_set[,c(2:40)])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
outputFile = cbind(test_set[,c(1,41)],y_pred)
write.csv(outputFile, file = "RightMiddle.csv",row.names=FALSE)
# Pneumoconiosis
# Random Forest Classification
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
inputFile = "CollatedPneumoconiosisData-GE Internal.xlsx"
inputSheet = "RightLower"
# Importing the dataset
library("readxl")
dataset = read_excel(inputFile, sheet = inputSheet)
# Encoding the target feature as factor
dataset$Label = factor(dataset$Label)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Label, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,c(2:40)] = scale(training_set[,c(2:40)])
test_set[,c(2:40)] = scale(test_set[,c(2:40)])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
outputFile = cbind(test_set[,c(1,41)],y_pred)
write.csv(outputFile, file = "RightLower.csv",row.names=FALSE)
# Pneumoconiosis
# Random Forest Classification
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
inputFile = "CollatedPneumoconiosisData-GE Internal.xlsx"
inputSheet = "LeftLower"
# Importing the dataset
library("readxl")
dataset = read_excel(inputFile, sheet = inputSheet)
# Encoding the target feature as factor
dataset$Label = factor(dataset$Label)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Label, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,c(2:40)] = scale(training_set[,c(2:40)])
test_set[,c(2:40)] = scale(test_set[,c(2:40)])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
outputFile = cbind(test_set[,c(1,41)],y_pred)
write.csv(outputFile, file = "LeftLower.csv",row.names=FALSE)
# Pneumoconiosis
# Random Forest Classification
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
inputFile = "CollatedPneumoconiosisData-GE Internal.xlsx"
inputSheet = "LeftMiddle"
# Importing the dataset
library("readxl")
dataset = read_excel(inputFile, sheet = inputSheet)
# Encoding the target feature as factor
dataset$Label = factor(dataset$Label)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Label, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,c(2:40)] = scale(training_set[,c(2:40)])
test_set[,c(2:40)] = scale(test_set[,c(2:40)])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
outputFile = cbind(test_set[,c(1,41)],y_pred)
write.csv(outputFile, file = "LeftMiddle.csv",row.names=FALSE)
# Pneumoconiosis
# Random Forest Classification
#setworking directoy
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
inputFile = "CollatedPneumoconiosisData-GE Internal.xlsx"
inputSheet = "LeftUpper"
# Importing the dataset
library("readxl")
dataset = read_excel(inputFile, sheet = inputSheet)
# Encoding the target feature as factor
dataset$Label = factor(dataset$Label)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Label, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set[,c(2:40)] = scale(training_set[,c(2:40)])
test_set[,c(2:40)] = scale(test_set[,c(2:40)])
# Fitting Random Forest Classification to the Training set
# install.packages('randomForest')
library(randomForest)
set.seed(123)
classifier = randomForest(x = training_set[,c(2:40)],
y = training_set$Label,
ntree = 500)
# Predicting the Test set results
y_pred = predict(classifier, newdata = test_set[,c(2:40)])
# Making the Confusion Matrix
cm = table(test_set$Label, y_pred)
# Calculating accuracy,sensitivity and specificity
library(caret)
confusionMatrix(cm)
# Tabulating actual and predicted results for each patient id and writing it to csv
outputFile = cbind(test_set[,c(1,41)],y_pred)
write.csv(outputFile, file = "LeftUpper.csv",row.names=FALSE)
# Reading the outputs for each sections
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
RightUpper = read.csv("RightUpper.csv")
RightMiddle = read.csv("RightMiddle.csv")
RightLower = read.csv("RightLower.csv")
LeftUpper = read.csv("LeftUpper.csv")
LeftMiddle = read.csv("LeftMiddle.csv")
LeftLower = read.csv("LeftLower.csv")
View(LeftLower)
View(LeftMiddle)
View(LeftUpper)
View(LeftLower)
output_dataset = merge(RightUpper, RightMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., RightLower, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftUpper, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftLower, by='PatientNumMasked', all = TRUE)
library(dplyr)
output_dataset = merge(RightUpper, RightMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., RightLower, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftUpper, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftLower, by='PatientNumMasked', all = TRUE)
View(output_dataset)
output_dataset$Actual =  max(output_dataset[,c(2,4,6,8,10,12)])
output_dataset$Predict =  max(output_dataset[,c(3,5,7,9,11,13)])
View(output_dataset)
output_dataset[is.na(output_dataset)] <- 0
output_dataset$Actual =  max(output_dataset[,c(2,4,6,8,10,12)])
output_dataset$Predict =  max(output_dataset[,c(3,5,7,9,11,13)])
View(output_dataset)
cm = table(output_dataset$Actual,output_dataset$Predict)
cm
# Pneumoconiosis Combined results for Right and Left (Upper,Middle,Lower) X Ray
# Imprting required libraries
library(dplyr)
# Reading the outputs for each sections
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
RightUpper = read.csv("RightUpper.csv")
RightMiddle = read.csv("RightMiddle.csv")
RightLower = read.csv("RightLower.csv")
LeftUpper = read.csv("LeftUpper.csv")
LeftMiddle = read.csv("LeftMiddle.csv")
LeftLower = read.csv("LeftLower.csv")
# Comparing the actual and predicted results based on all 6 files
output_dataset = merge(RightUpper, RightMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., RightLower, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftUpper, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftLower, by='PatientNumMasked', all = TRUE)
output_dataset[is.na(output_dataset)] <- 0
output_dataset$Actual =  max(output_dataset[,c(2,4,6,8,10,12)])
output_dataset$Predict =  max(output_dataset[,c(3,5,7,9,11,13)])
# Making the Confusion Matrix
(cm = table(output_dataset$Actual,output_dataset$Predict))
# Pneumoconiosis Combined results for Right and Left (Upper,Middle,Lower) X Ray
# Imprting required libraries
library(dplyr)
# Reading the outputs for each sections
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
RightUpper = read.csv("RightUpper.csv")
RightMiddle = read.csv("RightMiddle.csv")
RightLower = read.csv("RightLower.csv")
LeftUpper = read.csv("LeftUpper.csv")
LeftMiddle = read.csv("LeftMiddle.csv")
LeftLower = read.csv("LeftLower.csv")
# Comparing the actual and predicted results based on all 6 files
output_dataset = merge(RightUpper, RightMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., RightLower, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftUpper, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftLower, by='PatientNumMasked', all = TRUE)
output_dataset[is.na(output_dataset)] <- 0
output_dataset$Actual =  max(output_dataset[c(2,4,6,8,10,12)])
output_dataset$Predict =  max(output_dataset[c(3,5,7,9,11,13)])
# Making the Confusion Matrix
(cm = table(output_dataset$Actual,output_dataset$Predict))
View(output_dataset)
# Pneumoconiosis Combined results for Right and Left (Upper,Middle,Lower) X Ray
# Imprting required libraries
library(dplyr)
# Reading the outputs for each sections
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
RightUpper = read.csv("RightUpper.csv")
RightMiddle = read.csv("RightMiddle.csv")
RightLower = read.csv("RightLower.csv")
LeftUpper = read.csv("LeftUpper.csv")
LeftMiddle = read.csv("LeftMiddle.csv")
LeftLower = read.csv("LeftLower.csv")
# Comparing the actual and predicted results based on all 6 files
output_dataset = merge(RightUpper, RightMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., RightLower, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftUpper, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftLower, by='PatientNumMasked', all = TRUE)
output_dataset[is.na(output_dataset)] <- 0
output_dataset$Actual =  min(output_dataset[c(2,4,6,8,10,12)])
output_dataset$Predict =  min(output_dataset[c(3,5,7,9,11,13)])
# Making the Confusion Matrix
(cm = table(output_dataset$Actual,output_dataset$Predict))
View(output_dataset)
# Pneumoconiosis Combined results for Right and Left (Upper,Middle,Lower) X Ray
# Imprting required libraries
library(dplyr)
# Reading the outputs for each sections
setwd("~/Documents/Data Science/Projects/GE/GE_DataSCience")
RightUpper = read.csv("RightUpper.csv")
RightMiddle = read.csv("RightMiddle.csv")
RightLower = read.csv("RightLower.csv")
LeftUpper = read.csv("LeftUpper.csv")
LeftMiddle = read.csv("LeftMiddle.csv")
LeftLower = read.csv("LeftLower.csv")
# Comparing the actual and predicted results based on all 6 files
output_dataset = merge(RightUpper, RightMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., RightLower, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftUpper, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftMiddle, by='PatientNumMasked', all = TRUE) %>%
merge(., LeftLower, by='PatientNumMasked', all = TRUE)
output_dataset[is.na(output_dataset)] <- 0
output_dataset$Actual =  apply(output_dataset[c(2,4,6,8,10,12)], 1, FUN=max)
output_dataset$Predict =  apply(output_dataset[c(3,5,7,9,11,13)], 1, FUN=max)
# Making the Confusion Matrix
(cm = table(output_dataset$Actual,output_dataset$Predict))
library(caret)
confusionMatrix(cm)
